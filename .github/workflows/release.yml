name: Create Combined Release Package

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'  # Run when tag is pushed matching pattern v*, like v1.0.0
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Needed to create releases
  packages: read

jobs:
  build-dll:
    runs-on: windows-latest
    env:
      CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      BUILD_TYPE: Release

    steps:
    - uses: actions/checkout@v4

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

    - name: Setup vcpkg
      uses: actions/checkout@v4
      with:
        repository: microsoft/vcpkg
        path: vcpkg

    - name: Bootstrap vcpkg
      run: |
        cd vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics

    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }}

    - name: Build DLL
      run: cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Verify DLL Output
      run: |
        echo "--- Checking for DLL in Release folder ---"
        if (Test-Path -Path "build\${{ env.BUILD_TYPE }}\Intercept.dll") {
          echo "✅ Intercept.dll found in build output"
        } else {
          echo "❌ Intercept.dll not found in build output"
          exit 1
        }
        
        # Check for OpenSSL DLLs
        if (Test-Path -Path "build\${{ env.BUILD_TYPE }}\libcrypto-3-x64.dll") {
          echo "✅ libcrypto-3-x64.dll found in build output"
        } else {
          echo "❌ libcrypto-3-x64.dll not found (may be copied later)"
        }
        
        if (Test-Path -Path "build\${{ env.BUILD_TYPE }}\libssl-3-x64.dll") {
          echo "✅ libssl-3-x64.dll found in build output"
        } else {
          echo "❌ libssl-3-x64.dll not found (may be copied later)"
        }
        
        # Create output directory for DLLs
        New-Item -Path "dll-output" -ItemType Directory -Force
        Copy-Item -Path "build\${{ env.BUILD_TYPE }}\*.dll" -Destination "dll-output\" -Force

    - name: Upload DLL artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Intercept-DLL
        path: dll-output
        if-no-files-found: error
        retention-days: 1
        
  build-gui:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore GUI/InterceptSuite/InterceptSuite.csproj
      
    - name: Clean
      run: dotnet clean GUI/InterceptSuite/InterceptSuite.csproj --configuration Release
    
    - name: Build
      run: dotnet build GUI/InterceptSuite/InterceptSuite.csproj --configuration Release
    
    - name: Publish
      run: dotnet publish GUI/InterceptSuite/InterceptSuite.csproj --configuration Release --self-contained true -p:PublishSingleFile=true --runtime win-x64 --output publish
    
    - name: Upload GUI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: InterceptSuite-GUI
        path: publish
        if-no-files-found: error
        retention-days: 1

  create-combined-package:
    needs: [build-dll, build-gui]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download DLL artifacts
      uses: actions/download-artifact@v4
      with:
        name: Intercept-DLL
        path: combined/dll
    
    - name: Download GUI artifacts
      uses: actions/download-artifact@v4
      with:
        name: InterceptSuite-GUI
        path: combined
    
    - name: Organize files for packaging
      run: |
        # Move DLLs to top level of combined directory
        if (Test-Path -Path "combined/dll") {
          Get-ChildItem -Path "combined/dll" -Filter "*.dll" | ForEach-Object {
            Move-Item -Path $_.FullName -Destination "combined\" -Force
          }
          Remove-Item -Path "combined/dll" -Recurse -Force
        }
        
        # Add the readme and docs
        Copy-Item -Path "README.md" -Destination "combined\" -ErrorAction SilentlyContinue
        Copy-Item -Path "USAGE_GUIDE.md" -Destination "combined\" -ErrorAction SilentlyContinue
        
        # Get the version from the GUI executable
        $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo("${{ github.workspace }}\combined\InterceptSuite.exe")
        $version = "$($versionInfo.FileMajorPart).$($versionInfo.FileMinorPart).$($versionInfo.FileBuildPart)"
        
        # In case version info can't be read, use a default version or tag
        if (-not $version -or $version -eq "..") {
          if ("${{ github.ref_type }}" -eq "tag" -and "${{ github.ref_name }}".StartsWith("v")) {
            $version = "${{ github.ref_name }}".Substring(1)  # Remove 'v' prefix
          } else {
            $version = "1.0.0"
          }
        }
          echo "Package version: $version"
        echo "PACKAGE_VERSION=$version" >> $env:GITHUB_ENV
        
    - name: Create combined package
      run: |
        Compress-Archive -Path "combined\*" -DestinationPath "InterceptSuite-v${{ env.PACKAGE_VERSION }}-win-x64.zip"
        echo "✅ Combined package created: InterceptSuite-v${{ env.PACKAGE_VERSION }}-win-x64.zip"
    
    # Always upload as artifact so it's available even for non-tag builds
    - name: Upload combined package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: InterceptSuite-Full
        path: InterceptSuite-v${{ env.PACKAGE_VERSION }}-win-x64.zip
        if-no-files-found: error
        retention-days: 90
        
    # Create GitHub Release when a tag is pushed
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        name: "InterceptSuite v${{ env.PACKAGE_VERSION }}"
        body: |
          # InterceptSuite v${{ env.PACKAGE_VERSION }}
          
          TLS MITM Proxy Intercept Suite - Windows x64 Release
          
          ## What's Included
          - Windows 64-bit GUI application (self-contained, no .NET installation required)
          - Intercept native DLL with OpenSSL dependencies
          - Documentation
          
          ## Installation
          1. Download the ZIP file
          2. Extract all files to a directory
          3. Run InterceptSuite.exe
          
          ## System Requirements
          - Windows 10/11 64-bit
        files: InterceptSuite-v${{ env.PACKAGE_VERSION }}-win-x64.zip
        draft: false
        prerelease: false
