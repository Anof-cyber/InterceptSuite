name: Build Intercept Suite Package

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

jobs:
  build:
    runs-on: windows-latest
    env:
      CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      BUILD_TYPE: Release

    steps:
    - uses: actions/checkout@v4

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

    - name: Setup vcpkg
      uses: actions/checkout@v4
      with:
        repository: microsoft/vcpkg
        path: vcpkg

    - name: Bootstrap vcpkg
      run: |
        cd vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics

    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }}
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: List files to debug
      run: |
        echo "--- Output Directory Contents ---"
        dir build\${{ env.BUILD_TYPE }}
        echo "--- Check for Intercept.dll and dependencies ---"
        if (Test-Path -Path "build\${{ env.BUILD_TYPE }}\Intercept.dll") {
          echo "✅ Intercept.dll found in build output"
        } else {
          echo "❌ Intercept.dll not found in build output"
        }
        echo "--- Check for vcpkg directory ---"
        if (Test-Path -Path "vcpkg\installed\x64-windows\bin") {
          echo "--- vcpkg installed bin directory ---"
          dir vcpkg\installed\x64-windows\bin
        } else {
          echo "vcpkg bin directory not found - OpenSSL DLLs must be from another source"
        }

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build C# GUI Project
      run: |
        echo "--- Building InterceptSuite C# Project ---"
        cd "GUI\InterceptSuite"
        dotnet build -c ${{ env.BUILD_TYPE }}
        mkdir -p ..\..\build\package\InterceptSuite
        cp -r bin\${{ env.BUILD_TYPE }}\net8.0-windows\* ..\..\build\package\InterceptSuite\
        cd ..\..
        echo "--- Copying DLL and dependencies ---"
        cp build\${{ env.BUILD_TYPE }}\Intercept.dll build\package\InterceptSuite\
        cp build\${{ env.BUILD_TYPE }}\libcrypto-3-x64.dll build\package\InterceptSuite\
        cp build\${{ env.BUILD_TYPE }}\libssl-3-x64.dll build\package\InterceptSuite\    - name: Package
      working-directory: build
      run: |
        cd package
        Compress-Archive -Path InterceptSuite -DestinationPath InterceptSuite-v1.0.0-win-x64.zip

    - name: Upload Package
      uses: actions/upload-artifact@v4
      with:
        name: InterceptSuite-Windows
        path: build/package/InterceptSuite-*.zip
        if-no-files-found: error
        retention-days: 90
