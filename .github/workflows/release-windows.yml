name: Windows Release Build

on:
  release:
    types: [published, created]
  push:
    tags:
      - 'v*'  # Run when tag is pushed matching pattern v*, like v1.0.0
    branches:
      - master
      - Cross-Platform
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Needed to create releases and upload artifacts

env:
  BUILD_TYPE: Release

jobs:
  build-windows-release:
    runs-on: windows-2022

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # =====================================================================
    # STEP 1: Build C Library (.dll) using vcpkg and cmake
    # =====================================================================
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-windows-${{ hashFiles('vcpkg.json') }}-v2

    - name: Setup vcpkg
      uses: actions/checkout@v4
      with:
        repository: microsoft/vcpkg
        path: vcpkg
        fetch-depth: 0

    - name: Bootstrap vcpkg
      shell: pwsh
      run: |
        cd vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics
        # Update vcpkg to latest
        git pull origin master


    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    - name: Build C Library (.dll)
      shell: pwsh
      run: |
        Write-Host "=== Building InterceptSuite C Library for Windows with Static OpenSSL ===" -ForegroundColor Green

        # Set environment variables for static linking
        $env:VCPKG_DEFAULT_TRIPLET = "x64-windows-static"

        # Install dependencies with static triplet
        .\vcpkg\vcpkg.exe install --triplet x64-windows-static

        # Build the library
        .\build_windows.ps1 -VcpkgRoot "${{ github.workspace }}\vcpkg"

        Write-Host "=== Verifying DLL build (static linking) ===" -ForegroundColor Green
        Get-ChildItem -Path "build\" -Recurse -Filter "*.dll"
        Get-ChildItem -Path "build\" -Recurse -Filter "*.lib"

        # Verify the built DLL size and dependencies
        $dllPath = "build\Release\Intercept.dll"
        if (Test-Path $dllPath) {
          $dllSize = (Get-Item $dllPath).Length
          Write-Host "✅ Intercept.dll built successfully - Size: $dllSize bytes" -ForegroundColor Green

          # Check dependencies using dumpbin if available
          try {
            $dumpbinOutput = & "dumpbin.exe" /dependents $dllPath 2>$null
            Write-Host "=== DLL Dependencies ===" -ForegroundColor Cyan
            Write-Host $dumpbinOutput
          } catch {
            Write-Host "⚠️ dumpbin not available, skipping dependency check" -ForegroundColor Yellow
          }
        } else {
          Write-Error "❌ Intercept.dll not found in build directory"
          exit 1
        }

    # =====================================================================
    # STEP 2: Setup Rust and Node.js for Tauri App
    # =====================================================================

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'GUI/InterceptSuite/package-lock.json'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Install Rust dependencies
      working-directory: GUI/InterceptSuite/src-tauri
      run: |
        cargo fetch --locked

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          GUI/InterceptSuite/src-tauri/target/
        key: windows-rust-${{ hashFiles('GUI/InterceptSuite/src-tauri/Cargo.lock') }}

    # =====================================================================
    # STEP 3: Build Tauri Application
    # =====================================================================
    - name: Install Node.js dependencies
      working-directory: GUI/InterceptSuite
      run: npm ci
    - name: Prepare native libraries for Tauri
      working-directory: GUI/InterceptSuite/src-tauri
      shell: pwsh
      run: |
        Write-Host "=== Preparing native libraries (static linking) ===" -ForegroundColor Green
        .\prepare-resources.ps1

        # Ensure resources directory exists and has proper structure
        if (-not (Test-Path "resources")) {
          New-Item -ItemType Directory -Path "resources" -Force
        }

        # Copy the DLL to resources if it's not there
        if ((Test-Path "Intercept.dll") -and (-not (Test-Path "resources\Intercept.dll"))) {
          Copy-Item "Intercept.dll" "resources\" -Force
          Write-Host "✅ Copied Intercept.dll to resources directory" -ForegroundColor Green
        }

        # With static linking, no OpenSSL DLLs are needed
        Write-Host "ℹ️ Using static OpenSSL linking - no separate DLLs required" -ForegroundColor Cyan

        Write-Host "=== Verifying resources directory ===" -ForegroundColor Green
        if (Test-Path "resources") {
          Get-ChildItem -Path "resources" -Recurse
        } else {
          Write-Host "❌ Resources directory still doesn't exist!" -ForegroundColor Red
          exit 1
        }

    - name: Build frontend
      working-directory: GUI/InterceptSuite
      run: |
        Write-Host "=== Building React frontend ===" -ForegroundColor Green
        npm run build

    - name: Build Tauri App
      working-directory: GUI/InterceptSuite
      shell: pwsh
      run: |
        Write-Host "=== Building Tauri app for Windows x64 ===" -ForegroundColor Green
        npm run tauri build
        Write-Host "=== Verifying Tauri build output ===" -ForegroundColor Green
        Get-ChildItem -Path "src-tauri\target\release\bundle\" -Recurse
        # Check if MSI installer was created
        if (Test-Path "src-tauri\target\release\bundle\msi") {
          Write-Host "MSI files:" -ForegroundColor Yellow
          Get-ChildItem -Path "src-tauri\target\release\bundle\msi\" -Recurse
        }
        # Check if NSIS installer was created
        if (Test-Path "src-tauri\target\release\bundle\nsis") {
          Write-Host "NSIS files:" -ForegroundColor Yellow
          Get-ChildItem -Path "src-tauri\target\release\bundle\nsis\" -Recurse
        }

    # =====================================================================
    # STEP 4: Create Release Artifacts
    # =====================================================================

    - name: Prepare release artifacts
      shell: pwsh
      run: |
        Write-Host "=== Preparing release artifacts ===" -ForegroundColor Green
        New-Item -ItemType Directory -Path "release-artifacts" -Force

        # Extract version from tag or use default
        if ("${{ github.ref }}" -like "refs/tags/*") {
          $VERSION = "${{ github.ref_name }}"
          $VERSION = $VERSION -replace "^v", ""  # Remove 'v' prefix if present
        } else {
          $VERSION = "dev-build"
        }
        Write-Host "Building for version: $VERSION" -ForegroundColor Yellow

        # Copy MSI installer (if exists)
        if (Test-Path "GUI\InterceptSuite\src-tauri\target\release\bundle\msi") {
          $msiFiles = Get-ChildItem -Path "GUI\InterceptSuite\src-tauri\target\release\bundle\msi" -Filter "*.msi" -Recurse
          foreach ($msi in $msiFiles) {
            Copy-Item $msi.FullName "release-artifacts\InterceptSuite-v$VERSION-windows-x64.msi"
            Write-Host "✅ MSI installer copied" -ForegroundColor Green
          }
        }

        # Copy NSIS installer (if exists)
        if (Test-Path "GUI\InterceptSuite\src-tauri\target\release\bundle\nsis") {
          $exeFiles = Get-ChildItem -Path "GUI\InterceptSuite\src-tauri\target\release\bundle\nsis" -Filter "*.exe" -Recurse
          foreach ($exe in $exeFiles) {
            Copy-Item $exe.FullName "release-artifacts\InterceptSuite-v$VERSION-windows-x64-installer.exe"
            Write-Host "✅ NSIS installer copied" -ForegroundColor Green
          }
        }

        # Copy standalone DLL and LIB for developers
        $dllFiles = Get-ChildItem -Path "build" -Filter "*.dll" -Recurse | Where-Object { $_.Name -like "*Intercept*" }
        $libFiles = Get-ChildItem -Path "build" -Filter "*.lib" -Recurse | Where-Object { $_.Name -like "*Intercept*" }

        foreach ($dll in $dllFiles) {
          Copy-Item $dll.FullName "release-artifacts\libIntercept-v$VERSION-windows-x64.dll"
        }
        foreach ($lib in $libFiles) {
          Copy-Item $lib.FullName "release-artifacts\libIntercept-v$VERSION-windows-x64.lib"
        }

        # Create a library-only package for developers
        $libraryFiles = @()
        $libraryFiles += Get-ChildItem -Path "build" -Filter "*.dll" -Recurse | Where-Object { $_.Name -like "*Intercept*" }
        $libraryFiles += Get-ChildItem -Path "build" -Filter "*.lib" -Recurse | Where-Object { $_.Name -like "*Intercept*" }
        $libraryFiles += Get-ChildItem -Path "include" -Filter "tls_proxy_dll.h"
        $libraryFiles += Get-ChildItem -Path "include" -Filter "tls_proxy.h"
        $libraryFiles += Get-ChildItem -Path "." -Filter "Library_INTEGRATION.md"

        if ($libraryFiles.Count -gt 0) {
          Compress-Archive -Path $libraryFiles.FullName -DestinationPath "release-artifacts\InterceptSuite-Library-v$VERSION-windows-x64.zip" -Force
        }

        Write-Host "=== Release artifacts prepared ===" -ForegroundColor Green
        Get-ChildItem -Path "release-artifacts" -Recurse

    - name: Generate checksums
      shell: pwsh
      run: |
        Set-Location "release-artifacts"
        $files = Get-ChildItem -Filter "*.*" | Where-Object { -not $_.PSIsContainer }
        $checksums = @()

        foreach ($file in $files) {
          $hash = Get-FileHash -Path $file.Name -Algorithm SHA256
          $checksums += "$($hash.Hash.ToLower())  $($file.Name)"
        }

        if ($checksums.Count -gt 0) {
          $checksums | Out-File -FilePath "checksums-windows.txt" -Encoding utf8
          Write-Host "=== Checksums generated ===" -ForegroundColor Green
          Get-Content "checksums-windows.txt"
        } else {
          Write-Host "No files found to generate checksums for" -ForegroundColor Yellow
        }

    # =====================================================================
    # STEP 5: Upload to GitHub Release (if this is a release)
    # =====================================================================

    - name: Upload to GitHub Release
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
            release-artifacts/InterceptSuite-v*-windows-x64.msi
            release-artifacts/InterceptSuite-v*-windows-x64-installer.exe
            release-artifacts/libIntercept-v*-windows-x64.dll
            release-artifacts/libIntercept-v*-windows-x64.lib
            release-artifacts/InterceptSuite-Library-v*-windows-x64.zip
            release-artifacts/checksums-windows.txt

    # =====================================================================
    # STEP 6: Upload Build Artifacts (for all builds)
    # =====================================================================

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-artifacts
        path: release-artifacts/
        retention-days: 30
        if-no-files-found: error

    - name: Build Summary
      shell: pwsh
      run: |
        "## 🪟 Windows Build Completed Successfully! 🎉" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
        "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "### 📦 Artifacts Created:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "- ✅ Native C Library (DLL + LIB)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "- ✅ Tauri GUI Application" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "- ✅ Windows MSI Installer" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "- ✅ NSIS Installer (EXE)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "- ✅ Developer Library Package" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "### 🔍 Build Details:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "- **Platform**: Windows x64" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "- **Build Type**: Release" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "- **Toolchain**: MSVC 2022" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        if (Test-Path "release-artifacts\checksums-windows.txt") {
          "### 🔐 Checksums:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          Get-Content "release-artifacts\checksums-windows.txt" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        }