name: macOS Release Build

on:
  release:
    types: [published, created]
  push:
    tags:
      - 'v*'  # Run when tag is pushed matching pattern v*, like v1.0.0
    branches:
      - master
      - Cross-Platform
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Needed to create releases and upload artifacts

env:
  BUILD_TYPE: Release
  MACOSX_DEPLOYMENT_TARGET: "11"

jobs:
  build-macos-release:
    runs-on: macos-14

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # =====================================================================
    # STEP 1: Build C Library (dylib) using vcpkg and cmake
    # =====================================================================

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-macos-${{ hashFiles('vcpkg.json') }}-v2

    - name: Setup vcpkg
      uses: actions/checkout@v4
      with:
        repository: microsoft/vcpkg
        path: vcpkg
        fetch-depth: 0

    - name: Bootstrap vcpkg
      run: |
        cd vcpkg
        ./bootstrap-vcpkg.sh -disableMetrics
        # Update vcpkg to latest
        git pull origin master

    - name: Build C Library (dylib)
      run: |
        echo "=== Building InterceptSuite C Library for macOS ==="
        chmod +x build_macos.sh
        ./build_macos.sh --vcpkg-root=${{ github.workspace }}/vcpkg

        echo "=== Verifying dylib build ==="
        ls -la build/
        file build/libIntercept.dylib

    # =====================================================================
    # STEP 2: Setup Rust and Node.js for Tauri App
    # =====================================================================

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'GUI/InterceptSuite/package-lock.json'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-apple-darwin,aarch64-apple-darwin

    - name: Install Rust dependencies
      run: |
        cargo install tauri-cli --version "^2.0.0"

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          GUI/InterceptSuite/src-tauri/target/
        key: macos-rust-${{ hashFiles('GUI/InterceptSuite/src-tauri/Cargo.lock') }}

    # =====================================================================
    # STEP 3: Build Tauri Application
    # =====================================================================

    - name: Install Node.js dependencies
      working-directory: GUI/InterceptSuite
      run: npm ci

    - name: Prepare native libraries for Tauri
      working-directory: GUI/InterceptSuite/src-tauri
      run: |
        echo "=== Preparing native libraries ==="
        chmod +x prepare-resources.sh
        ./prepare-resources.sh

        echo "=== Verifying resources ==="
        ls -la resources/

    - name: Build frontend
      working-directory: GUI/InterceptSuite
      run: |
        echo "=== Building React frontend ==="
        npm run build

    - name: Build Tauri App (Universal Binary)
      working-directory: GUI/InterceptSuite
      run: |
        echo "=== Building Tauri app for macOS ==="
        npm run tauri build -- --target universal-apple-darwin

        echo "=== Verifying Tauri build output ==="
        ls -la src-tauri/target/universal-apple-darwin/release/bundle/

        # Check if DMG was created
        if [ -d "src-tauri/target/universal-apple-darwin/release/bundle/dmg" ]; then
          ls -la src-tauri/target/universal-apple-darwin/release/bundle/dmg/
        fi

    # =====================================================================
    # STEP 4: Create Release Artifacts
    # =====================================================================

    - name: Prepare release artifacts
      run: |
        echo "=== Preparing release artifacts ==="
        mkdir -p release-artifacts

        # Extract version from tag or use default
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
        else
          VERSION="dev-build"
        fi

        echo "Building for version: $VERSION"

        # Copy DMG file
        if [ -f "GUI/InterceptSuite/src-tauri/target/universal-apple-darwin/release/bundle/dmg/interceptsuite_${VERSION}_universal.dmg" ]; then
          cp "GUI/InterceptSuite/src-tauri/target/universal-apple-darwin/release/bundle/dmg/interceptsuite_${VERSION}_universal.dmg" "release-artifacts/InterceptSuite-v${VERSION}-macos-universal.dmg"
          echo "✅ DMG file copied"
        else
          echo "❌ DMG file not found, checking for alternative names..."
          find GUI/InterceptSuite/src-tauri/target/universal-apple-darwin/release/bundle/dmg/ -name "*.dmg" -exec cp {} "release-artifacts/InterceptSuite-v${VERSION}-macos-universal.dmg" \;
        fi

        # Copy standalone dylib for developers
        cp build/libIntercept.dylib "release-artifacts/libIntercept-v${VERSION}-macos-universal.dylib"

        # Create a library-only package for developers
        tar -czf "release-artifacts/InterceptSuite-Library-v${VERSION}-macos-universal.tar.gz" \
          build/libIntercept.dylib \
          include/tls_proxy_dll.h \
          include/tls_proxy.h \
          Library_INTEGRATION.md

        echo "=== Release artifacts prepared ==="
        ls -la release-artifacts/

    - name: Generate checksums
      run: |
        cd release-artifacts
        shasum -a 256 *.dmg *.dylib *.tar.gz > checksums-macos.txt
        echo "=== Checksums generated ==="
        cat checksums-macos.txt

    # =====================================================================
    # STEP 5: Upload to GitHub Release (if this is a release)
    # =====================================================================

    - name: Upload to GitHub Release
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release-artifacts/InterceptSuite-v*-macos-universal.dmg
          release-artifacts/libIntercept-v*-macos-universal.dylib
          release-artifacts/InterceptSuite-Library-v*-macos-universal.tar.gz
          release-artifacts/checksums-macos.txt
        name: "InterceptSuite ${{ github.ref_name }} - macOS Release"
        body: |
          ## 🍎 macOS Release - ${{ github.ref_name }}

          ### 📦 What's Included:
          - **InterceptSuite-v*-macos-universal.dmg** - Complete application with GUI (Universal Binary - Intel & Apple Silicon)
          - **libIntercept-v*-macos-universal.dylib** - Native library for developers
          - **InterceptSuite-Library-v*-macos-universal.tar.gz** - Development package with headers and documentation
          - **checksums-macos.txt** - SHA256 checksums for verification

          ### ⚠️ Installation Notes:
          - DMG is **unsigned** - you may need to bypass Gatekeeper
          - Right-click the app → "Open" → Confirm to run
          - Or temporarily disable Gatekeeper: `sudo spctl --master-disable`

          ### 🔧 System Requirements:
          - macOS 10.13 (High Sierra) or later
          - Intel Mac or Apple Silicon Mac (Universal Binary)

          ### 🛡️ Security:
          Please verify downloads using the provided checksums before installation.
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

    # =====================================================================
    # STEP 6: Upload Build Artifacts (for all builds)
    # =====================================================================

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-release-artifacts
        path: release-artifacts/
        retention-days: 30
        if-no-files-found: error

    - name: Build Summary
      run: |
        echo "## 🍎 macOS Build Completed Successfully! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Artifacts Created:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Native C Library (libIntercept.dylib)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Tauri GUI Application" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ macOS DMG Installer" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Developer Library Package" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Build Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: macOS Universal (Intel + Apple Silicon)" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type**: Release" >> $GITHUB_STEP_SUMMARY
        echo "- **C Library**: $(file build/libIntercept.dylib)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "release-artifacts/checksums-macos.txt" ]; then
          echo "### 🔐 Checksums:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat release-artifacts/checksums-macos.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi